1、什么是包围盒？
    拿到任何一个网格。找出适合该网格的最小的立方体。就是一个包围盒。它是自动从对象的网格中生成出来的。
    你可以认为包围盒是网格所占体积的简单近似值。如果看不到该盒，则肯定看不到网格。

2、Shader为什么需要这些关键字？
    着色器通道可以包含除着色器程序以外的其他语句。因此，程序必须以某种方式分开。

3、pragma是啥？
    pragma这个词来自希腊语，指的是一项行动或需要完成的事情。许多编程语言都使用它来发出特殊的编译器指令。

4、Unity的UnityCG.cginc库
    UnityShaderVariables.cginc 定义了渲染所需的一堆着色器变量，例如变换，相机和光照数据。这些都在需要时由Unity设置。
    HLSLSupport.cginc 进行了设置，因此无论代码针对的是哪个平台，都可以使用相同的代码进行编写。无需担心使用特定于平台的数据类型等。
    UnityInstancing.cginc 专门用于实例化支持，这是一种减少绘制调用的特定渲染技术。尽管它不直接包含文件，但依赖于UnityShaderVariables。
    请注意，这些文件的内容将有效地复制到你自己的文件中，从而替换了include指令。这发生在执行所有预处理指令的预处理步骤中。这些指令都是以#开头的所有语句，例如#include和#pragma。完成该步骤后，再次处理代码，并对其进行实际编译。
    如果多次包含同一个文件会发生什么？
        它的内容会多次复制到你的代码中。通常，你不想这样做，因为重复的定义很可能会导致编译器错误。

5、0这个返回值有效值吗？
    当使用这样的单个值时，编译器将对所有float组件重复该值。你也可以是显式的，并根据需要返回float4（0，0，0，0）。

6、alpha为0不会完全透明吗？
    除非我们的着色器实际上忽略了Alpha通道，不然肯定会。因为我们正在使用不透明的着色器。但如果我们编写的是支持透明度的着色器，这个结果就会是透明的。

7、可以省略位置参数吗？
    如果不使用，最好将其省略。但是，当涉及多个参数时，这会使某些着色器编译器感到困惑。因此，最好将片段程序输入与顶点程序输出完全匹配起来。

8、什么是uniform 变量？
    uniform表示变量对网格的所有顶点和片段具有相同的值。因此，它在所有顶点和片段上都是统一的。

9、_ST是什么意思？
    _ST后缀代表“缩放”和“平移”或类似名称。为什么不使用_TO来指代平铺和偏移？因为Unity一直使用_ST，并且向后兼容要求它保持这种方式，哪怕术语可能已更改了。

10、什么是宏？
    UnityCG.cginc包含一个方便的宏，可为我们简化此样板。我们可以将其用作方便的速记。
    宏类似于一个函数，在预处理代码阶段之前对其进行展开，然后对展开后的代码进行编译。这允许对代码进行文本操作，例如将_ST附加到变量名。TRANSFORM_TEX宏使用此技巧。如果你好奇的话，可以看看它的定义。

11、细节纹理必须是灰度的吗？
    它们不必是灰度的，但通常是灰度的。灰度细节纹理将通过变暗和变亮来严格调整原始颜色。这是相对直接的方式。与非灰色的颜色相乘会产生较不直观的结果。彩色细节纹理用于产生细微的颜色偏移。



















