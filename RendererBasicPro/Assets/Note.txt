1、坐标的变换顺序： 缩放 -> 旋转 -> 平移
	在物体刚刚放入世界坐标系的时候使用的是本地坐标，也就是本地和全局坐标系的原点和坐标轴都是重合的（当然两者分别使用了左右手坐标系时除外 - 那是BUG），此时所有物体都“把世界坐标系当做自己的本地坐标系”。
	而经过了坐标变换之后：
		1） 缩放变换不改变坐标轴的走向，也不改变原点的位置，所以两个坐标系仍然重合。
		2） 旋转变换改变坐标轴的走向，但不改变原点的位置，所以两个坐标系坐标轴不再处于相同走向。
		3） 平移变换不改变坐标轴走向，但改变原点位置，两个坐标系原点不再重合。
	颠倒后出现的情况：
		1） 当缩放在旋转之后进行时：和本地坐标轴成角度的缩放（会导致扭曲，像踩扁的可乐罐）。
		2） 当缩放和旋转在平移之后进行时：绕自己几何中心以外位置的原点的旋转 （地球公转式） 和缩放。

2、什么是弧度？
	像度数一样，它们可以用作旋转的量度。 使用单位圆时，弧度与您沿其圆周行进的距离匹配。 由于圆周的长度等于圆半径的2π倍，因此1个弧度等于π/ 180度。
	π是圆的周长与其直径之比。

3、乘法顺序重要吗？
	X乘以 X×（Y×Z）=（X×Y）×Z的顺序无关紧要。 最终得到一个不同的中间步骤，但最终结果却相同。 但是，在此方程式中对矩阵重新排序确实会改变旋转顺序，会产生不同的结果。 因此X×Y×Z≠Z×Y×X 在这方面，矩阵乘法不同于单数乘法。
	Unity的实际轮换顺序为ZXY。

4、什么是包围盒？
	拿到任何一个网格。找出适合该网格的最小的立方体。就是一个包围盒。它是自动从对象的网格中生成出来的。
	Unity通过检查对象的包围盒是否与摄影机的视锥相交来完成验证。

5、为什么编写Shader时需要关键字
	着色器通道可以包含除着色器程序以外的其他语句。因此，程序必须以某种方式分开。
	那为什么不使用另一个块呢？
	不知道。你后面还会遇到更多这样的奇怪情况。它们通常是曾经一些已经过时的设计决策。由于需要向后兼容，所以，我们仍然需要使用它们。




