1、分形
	具有以非整数维形式充填空间的形态特征。通常被定义为“一个粗糙或零碎的几何形状，可以分成数个部分，且每一部分都（至少近似地）是整体缩小后的形状”，即具有自相似的性质。1.26维。最简单的实现：一条直线三等分，中间那段做等边三角形，然后擦除下面那条边，得到的就是人为的分形图形。

2、什么是mesh
	是一个3D对象，要么从外部导入到Unity中，这是Unity的默认形状之一，要么是由代码生成。mesh需要包含3D空间中的点集合，以及由这些点定义的一组三角形(最基本的2D形状)。由三角形构成网格所代表的任何表面。
	2.1、 Mesh的三角形
		三角形是通过一系列顶点索引来定义的。由于每个三角形有三个点，三个连续的索引就描述了一个三角形。（只从一个方向可见）
		三角形的哪一边可见是由它的顶点顺序的时钟方向决定的。默认情况下，如果它们按顺时针方向排列，则三角形被认为是前向的和可见的，逆时针方向的三角形会被丢弃。另外我们也不会花时间渲染对象的内部，因为这些东西通常不会被看到。
	2.2、 uv坐标
		定义：指所有的图象文件都是二维的一个平面。水平方向是U，垂直方向是V，通过这个平面的，二维的UV坐标系。通过UV坐标可以定位图象上的任意一个象素。
		在生成Mesh时，如果我们自己不提供UV坐标，那么它们都是默认的零。要使纹理适合整个网格，只需将顶点的位置除以网格尺寸即可。
	2.3、 法线是如何作用的？
		法线是一个垂直于表面的矢量。我们总是使用单位长度的法线，并用它们指向表面的外部，从而区分表面的内外。
		法线还可以用来确定光线击中表面的角度(如果有的话)。它的具体使用方式取决于shader。
	2.4、 法线是怎么计算的？
		Mesh.RecalculateNormals 计算每个顶点的法线是通过计算哪些三角形与该顶点相连，先确定这些平面三角形的法线，对它们进行平均，最后对结果进行归一化处理。
	2.5、 切线是如何作用的？
		法线映射是在切线空间中定义的。这是一个在物体表面流动的三维空间。这种方法允许我们在不同的地方和方向应用相同的法线映射。
	2.6、 为什么要定义切线空间
		当一个模型有很多凹凸细节时，模型的顶点网格会很密（数据量大），随之而来的就是性能问题。模型凹凸对应的是顶点的高度偏移，高度偏移影响的是法线方向，因而我们视觉上看到模型的凹凸（光影计算）其实只和模型法线有关，因此可以修改模型原本的法线信息，让模型看起来有凹凸，但是实际却是网格稀疏的低面几何体。
		
		法线贴图在切线空间中定义。这是一个流动在物理表面的3D空间。这个方法使我们能够使用相同的法线贴图在不同的空间和方向。
		表面法相用于描述空间中的向上方向。但是哪个方向是正确的？它是有切线决定得。理论上，法线和切线的夹角应该是90度。两者的叉积可求出三维空间的第三个方向。但是现实中这个结果并不是90度，但是效果依然是令人比较满意的。
		所以切线是一个三维向量，但是在Unity中它是使用四维向量定义的。第四个值通常是1或者-1，用于控制第三切线空间唯独方向-朝前或朝后,这有助于展示法线贴图，通常用于左右对称的3D模型，像人一样。Untiy的shader执行此计算要求我们使用-1。
	2.7、 为什么使用顶点色？
		使用UV通道可能更有意义，但我们只能在其中放置2D矢量，而这里我们需要存储一个3D矢量。当然可以同时使用第一个和第二个UV通道，但之后我们必须将数据分成两个通道，这恰恰是我们想要避免的。



3、什么是材质
	材质用来定义物体的视觉特性。它们可以是非常简单（比如一个恒定的颜色），也可以非常复杂。材质一般要包括一个着色器和任何着色器需要的数据。
	着色器基本作用是告诉显卡如何绘制物体的多边形。标准漫射着色器使用单一的颜色和可选的纹理，结合场景中的光源，来确定多边形的外观。

4、enumerator是什么？
	枚举是一次遍历某个集合的概念，就像循环遍历数组中的所有元素一样。enumerator（枚举器）或iterator（迭代器）是为此功能提供接口的对象。System.Collections.IEnumerator描述了这样的接口。

5、yield有什么用？
	yield语句被迭代器用来控制协程的生命周期。要使枚举，就需要跟踪它的进度。这涉及到一些基本相同的样模板码。你真正想要的是只编写类似于 return firstItem; return secondItem这样的代码，直到函数执行结束。yield语句允许你准确地做到这一点。

6、协程怎么工作？
	当你在Unity中创建协程时，真正做的其是创建一个迭代器。当你将它传递给StartCooutine方法时，它将被存储，并被要求每帧都要它的下一个Item，直到它完成为止。

7、 Physics.Raycast 是如何工作的？
	这是一个静态的方法，用来把射线投影到3D的场景里。它有很多个变体方法，最简单的一个就是传递一个ray参数，然后返回是否击中了对象。

8、 

9、 














